<% provide(:title, 'Show Reading') %>
<style>
    div.tooltip {
        position: absolute;
        text-align: center;
        width: 140px;
        height: 28px;
        padding: 4px;
        font: 12px sans-serif;
        background: lemonchiffon;
        border: 0px;
        border-radius: 8px;
        pointer-events: none;
    }
</style>
<div class="row">
    <div class="span8 offset2" style="vertical-align:middle;display:table-cell;float:none" id="sunburst"></div>
</div>

<script>
    var width = 840,
            height = width,
            radius = width / 2,
            x = d3.scale.linear().range([0, 2 * Math.PI]),
            y = d3.scale.pow().exponent(1.3).domain([0, 1]).range([0, radius]),
            padding = 5,
            duration = 1000;
            color = d3.scale.category20c();

    var div = d3.select("#sunburst");

    div.select("img").remove();

    var vis = div.append("svg")
            .attr("width", width + padding * 2)
            .attr("height", height + padding * 2)
            .append("g")
            .attr("transform", "translate(" + [radius + padding, radius + padding] + ")");

    div.append("p")
            .attr("id", "intro")
            .text("Click to zoom!");

    var tip = d3.select("#sunburst").append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);

    var partition = d3.layout.partition()
                             .sort(null)
                             .value(function(d) { return d.power; });

    var arc = d3.svg.arc()
            .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
            .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
            .innerRadius(function(d) { return Math.max(0, d.y ? y(d.y) : d.y); })
            .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });

    d3.json("/five_minute_readings/all_data", function(error, json) {
        var nodes = partition.nodes({children: json});

        var path = vis.selectAll("path").data(nodes);

        path.enter().append("path")
                .attr("id", function(d, i) { return "path-" + i; })
                .attr("d", arc)
                .on("mouseover", function(d) {
                    if (d.name) {
                        tip.transition()
                            .duration(200)
                            .style("opacity", .9);

                        tip.html("date:"+ d.name+" power:"+ d.power+"<br/>")
                            .style("left", (d3.event.pageX) + "px")
                            .style("top", (d3.event.pageY - 28) + "px");
                    }
                })
                .on("mouseout", function(d) {
                    tip.transition()
                            .duration(500)
                            .style("opacity", 0);
                })
                .on("mousemove", function(d) {
                    if (d.name) {
                        tip.style("left", (d3.event.pageX) + "px")
                           .style("top", (d3.event.pageY - 28) + "px");
                    }

                })
                .style("stroke", "#fff")
                .style("fill", function(d) { return color((d.children ? d : d.parent).name); })
                .style("fill-rule", "evenodd")
                .on("click", click);

        function click(d) {
            path.transition()
                .duration(duration)
                .attrTween("d", arcTween(d));
        }
    });

    // Interpolate the scales!
    function arcTween(d) {
        var my = maxY(d),
            xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx -0.000000000001]),
            yd = d3.interpolate(y.domain(), [d.y, my]),
            yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
        console.log(my);
        console.log(xd);
        console.log(yd);
        console.log(yr);
        return function(d) {
            return function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); return arc(d); };
        };
    }

    function maxY(d) {
        return d.children ? Math.max.apply(Math, d.children.map(maxY)) : d.y + d.dy;
    }

</script>


<script>
  if (top != self) top.location.replace(location);
</script>
